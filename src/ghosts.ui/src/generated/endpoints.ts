/**
 * This is a file autogenerated by @see https://github.com/astahmer/openapi-zod-client
 *
 * It contains:
 * 	1. 	Zod schemas (data validators) that are based to the types defined in the GHOSTS OpenAPI schema.
 * 	2. 	An api object which can be used to make calls to GHOSTS API endpoints.
 * 		These endpoints are based on the OpenAPI schema and the datatypes of requests/responses
 * 		are validated by the generated zod schemas. Some endpoints and datatypes have been
 * 		modified because the OpenAPI schema is incomplete.
 */

import { Zodios, type ZodiosOptions, makeApi } from "@zodios/core";
import { z } from "zod";

type Unit = Partial<{
  name: string | null;
  type: string | null;
  nick: string | null;
  hq: string | null;
  sub: Array<Unit> | null;
}>;

const dateTime = z.string(); /* .datetime({ offset: true })*/

const GroupMachine = z
  .object({
    id: z.number().int(),
    groupId: z.number().int(),
    machineId: z.string().uuid(),
  })
  .partial();
const StatusType = z.enum(["Active", "Deleted"]);
const HistoryType = z.enum([
  "Created",
  "RequestedId",
  "Resynched",
  "RequestedUpdates",
  "SentNewTimeLine",
  "PostedResults",
]);
const MachineHistoryItem = z
  .object({
    id: z.number().int(),
    createdUtc: dateTime,
    type: HistoryType,
    object: z.string().nullable(),
    machineId: z.string().uuid(),
  })
  .partial();
const HistoryHealth = z
  .object({
    id: z.number().int(),
    machineId: z.string().uuid(),
    createdUtc: dateTime,
    internet: z.boolean().nullable(),
    permissions: z.boolean().nullable(),
    executionTime: z.number().int(),
    errors: z.string().nullable(),
    loggedOnUsers: z.string().nullable(),
    stats: z.string().nullable(),
  })
  .partial();
const HistoryTimeLine = z
  .object({
    id: z.number().int(),
    machineId: z.string().uuid(),
    createdUtc: dateTime,
    handler: z.string().nullable(),
    command: z.string().nullable(),
    commandArg: z.string().nullable(),
    result: z.string().nullable(),
    tags: z.string().nullable(),
  })
  .partial();
const HistoryTrackable = z
  .object({
    id: z.number().int(),
    machineId: z.string().uuid(),
    trackableId: z.string().uuid(),
    createdUtc: dateTime,
    handler: z.string().nullable(),
    command: z.string().nullable(),
    commandArg: z.string().nullable(),
    result: z.string().nullable(),
  })
  .partial();
const UpDownStatus = z.enum([
  "Unknown",
  "Up",
  "UpWithErrors",
  "Down",
  "DownWithErrors",
]);
export type MachineType = z.infer<typeof Machine>;
const Machine = z
  .object({
    id: z.string().uuid(),
    name: z.string(),
    fqdn: z.string().nullable(),
    domain: z.string().nullable(),
    host: z.string().nullable(),
    resolvedHost: z.string().nullable(),
    hostIp: z.string().nullable(),
    ipAddress: z.string().nullable(),
    currentUsername: z.string().nullable(),
    clientVersion: z.string().nullable(),
    history: z.array(MachineHistoryItem).nullable(),
    historyHealth: z.array(HistoryHealth).nullable(),
    historyTimeline: z.array(HistoryTimeLine).nullable(),
    historyTrackables: z.array(HistoryTrackable).nullable(),
    status: StatusType,
    createdUtc: dateTime,
    statusMessage: z.string().nullable(),
    statusUp: UpDownStatus,
    lastReportedUtc: dateTime,
    hadId: z.boolean(),
  })
  .partial();
export type GroupType = z.infer<typeof Group>;
const Group = z
  .object({
    id: z.number().int(),
    name: z.string().min(1),
    groupMachines: z.array(GroupMachine).nullish(),
    status: StatusType.optional(),
    machines: z.array(Machine).nullish(),
  })
  .partial();
export const updateTypes = [
  "Timeline",
  "Health",
  "TimelinePartial",
  "RequestForTimeline",
] as const;
const UpdateType = z.enum(updateTypes);
const MachineUpdate = z
  .object({
    id: z.number().int(),
    machineId: z.string().uuid(),
    username: z.string().nullable(),
    type: UpdateType,
    activeUtc: dateTime,
    createdUtc: dateTime,
    status: StatusType,
    update: z.string().nullable(),
  })
  .partial();
const TimeLineStatus = z.enum(["Run", "Stop"]);
export const HANDLER_TYPES = [
  "BrowserFirefox",
  "BrowserChrome",
  "Command",
  "Notepad",
  "Outlook",
  "Word",
  "Excel",
  "PowerPoint",
  "NpcSystem",
  "Reboot",
  "Curl",
  "Clicks",
  "Watcher",
  "LightWord",
  "LightExcel",
  "LightPowerPoint",
  "PowerShell",
  "Bash",
  "Print",
  "Ssh",
  "Sftp",
  "Pidgin",
  "Rdp",
  "Wmi",
  "Outlookv2",
  "Ftp",
  "AwsCli",
] as const;

const handlerType = z.enum(HANDLER_TYPES);
export type HandlerType = z.infer<typeof handlerType>;

// custom validator to use with machine and machine group activity endpoints
export const MachineActivity = z.object({
  id: z.number(),
  machineId: z.string().uuid(),
  createdUtc: dateTime,
  handler: handlerType,
  command: z.string().nullable(),
  commandArg: z.string().nullable(),
});
export type MachineActivityType = z.infer<typeof MachineActivity>;

// The api doesn't accept the below format for some reason
const TimeSpan = z.string();
// .object({
// 	ticks: z.number().int(),
// 	days: z.number().int(),
// 	hours: z.number().int(),
// 	milliseconds: z.number().int(),
// 	minutes: z.number().int(),
// 	seconds: z.number().int(),
// 	totalDays: z.number(),
// 	totalHours: z.number(),
// 	totalMilliseconds: z.number(),
// 	totalMinutes: z.number(),
// 	totalSeconds: z.number(),
// })
// .partial();
const TimeLineEvent = z
  .object({
    trackableId: z.string().nullable(),
    command: z.string().nullable(),
    commandArgs: z.array(z.unknown()).nullable(),
    delayAfter: z.unknown().nullable(),
    delayBefore: z.unknown().nullable(),
    delayAfterActual: z.number().int(),
    delayBeforeActual: z.number().int(),
  })
  .partial();
const TimeLineScheduleType = z.enum(["Other", "Cron"]);
const TimeLineHandler = z.object({
  handlerType: handlerType,
  initial: z.string().nullable(),
  utcTimeOn: TimeSpan,
  utcTimeOff: TimeSpan,
  // utcTimeBlocks: z.array(TimeSpan).nullable(),
  handlerArgs: z.record(z.unknown().nullable()).nullable(),
  loop: z.boolean(),
  timeLineEvents: z.array(TimeLineEvent).nullable(),
  scheduleType: TimeLineScheduleType.optional(),
  schedule: z.string().optional(),
});
const TimeLine = z
  .object({
    id: z.string().uuid(),
    status: TimeLineStatus,
    timeLineHandlers: z.array(TimeLineHandler).nullable(),
  })
  .partial();
const MachineUpdateViewModel = z
  .object({
    machineId: z.string().uuid(),
    type: UpdateType,
    activeUtc: dateTime,
    status: StatusType,
    update: TimeLine,
  })
  .partial();
const NameProfile = z
  .object({
    prefix: z.string().nullable(),
    first: z.string().nullable(),
    middle: z.string().nullable(),
    last: z.string().nullable(),
    suffix: z.string().nullable(),
  })
  .partial();
const AddressProfile = z
  .object({
    addressType: z.string().nullable(),
    name: z.string().nullable(),
    address1: z.string().nullable(),
    address2: z.string().nullable(),
    city: z.string().nullable(),
    state: z.string().nullable(),
    postalCode: z.string().nullable(),
  })
  .partial();
const Preference = z
  .object({
    id: z.number().int(),
    score: z.number().int(),
    name: z.string().nullable(),
    meta: z.string().nullable(),
  })
  .partial();
const Unit: z.ZodType<Unit> = z.lazy(() =>
  z
    .object({
      name: z.string().nullable(),
      type: z.string().nullable(),
      nick: z.string().nullable(),
      hq: z.string().nullable(),
      sub: z.array(Unit).nullable(),
    })
    .partial()
);
const MilitaryUnit = z
  .object({
    country: z.string().nullable(),
    address: AddressProfile.nullable(),
    sub: z.array(Unit).nullable(),
  })
  .partial();
const MilitaryBranch = z.enum(["USAF", "USARMY", "USCG", "USMC", "USN"]);
const Rank = z
  .object({
    branch: MilitaryBranch,
    pay: z.string().nullable(),
    name: z.string().nullable(),
    abbr: z.string().nullable(),
    classification: z.string().nullable(),
    billet: z.string().nullable(),
    mos: z.string().nullable(),
    mosid: z.string().nullable(),
    probability: z.number(),
  })
  .partial();
const DegreeLevel = z.enum([
  "GED",
  "HSDiploma",
  "Associates",
  "Bachelors",
  "Masters",
  "Doctorate",
  "Professional",
  "None",
]);
const School = z
  .object({ name: z.string().nullable(), location: z.string().nullable() })
  .partial();
const Degree = z
  .object({
    level: DegreeLevel,
    degreeType: z.string().nullable(),
    major: z.string().nullable(),
    school: School,
  })
  .partial();
const EducationProfile = z
  .object({ degrees: z.array(Degree).nullable() })
  .partial();
const EmploymentStatuses = z.enum([
  "FullTime",
  "PartTime",
  "Suspended",
  "Temporary",
  "Terminated",
  "Resigned",
]);
const EmploymentRecord = z
  .object({
    company: z.string().nullable(),
    startDate: dateTime,
    endDate: dateTime.nullable(),
    department: z.string().nullable(),
    organization: z.string().nullable(),
    jobTitle: z.string().nullable(),
    level: z.number().int(),
    salary: z.number(),
    manager: z.string().uuid(),
    emailSuffix: z.string().nullable(),
    email: z.string().nullable(),
    address: AddressProfile,
    phone: z.string().nullable(),
    employmentStatus: EmploymentStatuses,
  })
  .partial();
const EmploymentProfile = z
  .object({ employmentRecords: z.array(EmploymentRecord).nullable() })
  .partial();
const BiologicalSex = z.enum(["Female", "Male"]);
const Prescription = z.object({ name: z.string().nullable() }).partial();
const MedicalCondition = z
  .object({
    name: z.string().nullable(),
    prescriptions: z.array(Prescription).nullable(),
  })
  .partial();
const HealthProfile = z
  .object({
    height: z.number().int(),
    weight: z.number().int(),
    bloodType: z.string().nullable(),
    preferredMeal: z.string().nullable(),
    medicalConditions: z.array(MedicalCondition).nullable(),
  })
  .partial();
const RelationshipProfile = z
  .object({
    id: z.number().int(),
    with: z.string().uuid(),
    type: z.string().nullable(),
  })
  .partial();
const Person = z
  .object({ name: NameProfile, relationship: z.string().nullable() })
  .partial();
const FamilyProfile = z
  .object({ members: z.array(Person).nullable() })
  .partial();
const CreditCard = z
  .object({ number: z.string().nullable(), type: z.string().nullable() })
  .partial();
const FinancialProfile = z
  .object({
    netWorth: z.number(),
    totalDebt: z.number(),
    creditCards: z.array(CreditCard).nullable(),
  })
  .partial();
const MentalHealthProfile = z
  .object({
    interpersonalSkills: z.number().int(),
    adherenceToPolicy: z.number().int(),
    enthusiasmAndAttitude: z.number().int(),
    openToFeedback: z.number().int(),
    generalPerformance: z.number().int(),
    overallPerformance: z.number().int(),
    iq: z.number().int(),
    spideySense: z.number().int(),
    senseSomethingIsWrongQuotient: z.number().int(),
    happyQuotient: z.number().int(),
    melancholyQuotient: z.number().int(),
  })
  .partial();
const Trip = z
  .object({
    code: z.string().nullable(),
    country: z.string().nullable(),
    destination: z.string().nullable(),
    arriveDestination: dateTime,
    departDestination: dateTime,
  })
  .partial();
const ForeignTravelProfile = z
  .object({ trips: z.array(Trip).nullable() })
  .partial();
const StrengthProfile = z.object({ name: z.string().nullable() }).partial();
const WeaknessProfile = z.object({ name: z.string().nullable() }).partial();
const CareerProfile = z
  .object({
    workEthic: z.number().int(),
    teamValue: z.number().int(),
    strengths: z.array(StrengthProfile).nullable(),
    weaknesses: z.array(WeaknessProfile).nullable(),
  })
  .partial();
const MachineProfile = z
  .object({
    name: z.string().nullable(),
    domain: z.string().nullable(),
    username: z.string().nullable(),
    password: z.string().nullable(),
    ipAddress: z.string().nullable(),
  })
  .partial();
const RelatedEvent = z
  .object({
    id: z.number().int(),
    description: z.string().nullable(),
    correctiveAction: z.string().nullable(),
    reportedBy: z.string().nullable(),
    reported: dateTime,
  })
  .partial();
const AccessProfile = z
  .object({
    id: z.number().int(),
    relatedEvents: z.array(RelatedEvent).nullable(),
    securityClearance: z.string().nullable(),
    physicalAccess: z.string().nullable(),
    systemsAccess: z.string().nullable(),
    isDoDSystemsPrivilegedUser: z.boolean().nullable(),
    explosivesAccess: z.string().nullable(),
    cbrnAccess: z.string().nullable(),
  })
  .partial();
const CriminalViolentOrAbusiveConductProfile = z
  .object({
    id: z.number().int(),
    relatedEvents: z.array(RelatedEvent).nullable(),
  })
  .partial();
const FinancialConsiderationsProfile = z
  .object({
    id: z.number().int(),
    relatedEvents: z.array(RelatedEvent).nullable(),
  })
  .partial();
const ForeignConsiderationsProfile = z
  .object({
    id: z.number().int(),
    relatedEvents: z.array(RelatedEvent).nullable(),
  })
  .partial();
const JudgementCharacterAndPsychologicalConditionsProfile = z
  .object({
    id: z.number().int(),
    relatedEvents: z.array(RelatedEvent).nullable(),
  })
  .partial();
const ProfessionalLifecycleAndPerformanceProfile = z
  .object({
    id: z.number().int(),
    relatedEvents: z.array(RelatedEvent).nullable(),
  })
  .partial();
const SecurityAndComplianceIncidentsProfile = z
  .object({
    id: z.number().int(),
    relatedEvents: z.array(RelatedEvent).nullable(),
  })
  .partial();
const SubstanceAbuseAndAddictiveBehaviorsProfile = z
  .object({
    id: z.number().int(),
    relatedEvents: z.array(RelatedEvent).nullable(),
  })
  .partial();
const TechnicalActivityProfile = z
  .object({
    id: z.number().int(),
    relatedEvents: z.array(RelatedEvent).nullable(),
  })
  .partial();
const InsiderThreatProfile = z
  .object({
    access: AccessProfile,
    criminalViolentOrAbusiveConduct: CriminalViolentOrAbusiveConductProfile,
    financialConsiderations: FinancialConsiderationsProfile,
    foreignConsiderations: ForeignConsiderationsProfile,
    judgementCharacterAndPsychologicalConditions:
      JudgementCharacterAndPsychologicalConditionsProfile,
    professionalLifecycleAndPerformance:
      ProfessionalLifecycleAndPerformanceProfile,
    securityAndComplianceIncidents: SecurityAndComplianceIncidentsProfile,
    substanceAbuseAndAddictiveBehaviors:
      SubstanceAbuseAndAddictiveBehaviorsProfile,
    technicalActivity: TechnicalActivityProfile,
    isBackgroundCheckStatusClear: z.boolean(),
  })
  .partial();
const Account = z
  .object({
    id: z.number().int(),
    url: z.string().nullable(),
    username: z.string().nullable(),
    password: z.string().nullable(),
  })
  .partial();
const MotivationalProfile = z
  .object({
    acceptance: z.number(),
    beauty: z.number(),
    curiosity: z.number(),
    eating: z.number(),
    family: z.number(),
    honor: z.number(),
    idealism: z.number(),
    independence: z.number(),
    order: z.number(),
    physicalActivity: z.number(),
    power: z.number(),
    saving: z.number(),
    socialContact: z.number(),
    status: z.number(),
    tranquility: z.number(),
    vengeance: z.number(),
  })
  .partial();
const NpcProfile = z
  .object({
    id: z.string().uuid(),
    name: NameProfile,
    address: z.array(AddressProfile).nullable(),
    email: z.string().nullable(),
    password: z.string().nullable(),
    homePhone: z.string().nullable(),
    cellPhone: z.string().nullable(),
    preferences: z.array(Preference).nullable(),
    unit: MilitaryUnit,
    rank: Rank,
    education: EducationProfile,
    employment: EmploymentProfile,
    biologicalSex: BiologicalSex,
    birthdate: dateTime,
    health: HealthProfile,
    attributes: z.record(z.string().nullable()).nullable(),
    relationships: z.array(RelationshipProfile).nullable(),
    family: FamilyProfile,
    finances: FinancialProfile,
    mentalHealth: MentalHealthProfile,
    foreignTravel: ForeignTravelProfile,
    career: CareerProfile,
    workstation: MachineProfile,
    insiderThreat: InsiderThreatProfile,
    accounts: z.array(Account).nullable(),
    motivationalProfile: MotivationalProfile,
    cac: z.string().nullable(),
    photoLink: z.string().nullable(),
    created: dateTime,
  })
  .partial();
const NpcRecord = z
  .object({
    id: z.string().uuid(),
    machineId: z.string().uuid().nullable(),
    campaign: z.string().nullable(),
    enclave: z.string().nullable(),
    team: z.string().nullable(),
    npcProfile: NpcProfile,
  })
  .partial();
const NpcNameId = z
  .object({ id: z.string().uuid(), name: z.string().nullable() })
  .partial();
const IActionResult = z.object({}).partial();
const TfVarsConfiguration = z
  .object({
    campaign: z.string().nullable(),
    enclave: z.string().nullable(),
    team: z.string().nullable(),
    ipAddressHigh: z.string().nullable(),
    ipAddressLow: z.string().nullable(),
    gateway: z.string().nullable(),
    mask: z.string().nullable(),
  })
  .partial();
const RankDistribution = z
  .object({
    payGrade: z.string().nullable(),
    probability: z.number(),
    minimum: z.number().int(),
  })
  .partial();
const PreferenceOption = z
  .object({
    score: z.number().int(),
    scoreHigh: z.number().int(),
    scoreLow: z.number().int(),
    name: z.string().nullable(),
    meta: z.string().nullable(),
  })
  .partial();
const NpcGenerationConfiguration = z
  .object({
    branch: MilitaryBranch,
    rankDistribution: z.array(RankDistribution).nullable(),
    unit: z.string().nullable(),
    username: z.string().nullable(),
    preferenceSettings: z.array(PreferenceOption).nullable(),
  })
  .partial();
const NpcConfiguration = z
  .object({
    number: z.number().int(),
    configuration: NpcGenerationConfiguration,
  })
  .partial();
const TeamConfiguration = z
  .object({
    npcs: NpcConfiguration,
    name: z.string().nullable(),
    machineNameTemplate: z.string().nullable(),
    domainTemplate: z.string().nullable(),
    preferenceSettings: z.array(PreferenceOption).nullable(),
  })
  .partial();
const EnclaveConfiguration = z
  .object({
    name: z.string().nullable(),
    teams: z.array(TeamConfiguration).nullable(),
  })
  .partial();
const InsiderThreatGenerationConfiguration = z
  .object({
    campaign: z.string().nullable(),
    enclaves: z.array(EnclaveConfiguration).nullable(),
  })
  .partial();
const GenerationConfiguration = z
  .object({
    campaign: z.string().nullable(),
    enclaves: z.array(EnclaveConfiguration).nullable(),
  })
  .partial();
const InterfaceBinding = z
  .object({
    id: z.number().int(),
    interfaceId: z.number().int(),
    internetAddress: z.string().nullable(),
    physicalAddress: z.string().nullable(),
    type: z.string().nullable(),
  })
  .partial();
const Interface = z
  .object({
    id: z.number().int(),
    surveyId: z.number().int(),
    name: z.string().nullable(),
    bindings: z.array(InterfaceBinding).nullable(),
  })
  .partial();
const LocalUser = z
  .object({
    id: z.number().int(),
    surveyId: z.number().int(),
    username: z.string().nullable(),
    domain: z.string().nullable(),
  })
  .partial();
const DriveInfo = z
  .object({
    id: z.number().int(),
    surveyId: z.number().int(),
    availableFreeSpace: z.number().int(),
    driveFormat: z.string().nullable(),
    driveType: z.string().nullable(),
    isReady: z.boolean(),
    name: z.string().nullable(),
    rootDirectory: z.string().nullable(),
    totalFreeSpace: z.number().int(),
    totalSize: z.number().int(),
    volumeLabel: z.string().nullable(),
  })
  .partial();
const LocalProcess = z
  .object({
    id: z.number().int(),
    surveyId: z.number().int(),
    privateMemorySize64: z.number().int(),
    mainWindowTitle: z.string().nullable(),
    processName: z.string().nullable(),
    startTime: dateTime.nullable(),
    fileName: z.string().nullable(),
    owner: z.string().nullable(),
    ownerDomain: z.string().nullable(),
    ownerSid: z.string().nullable(),
  })
  .partial();
const EventLogEntry = z
  .object({
    id: z.number().int(),
    eventLogId: z.number().int(),
    created: dateTime,
    entryType: z.string().nullable(),
    source: z.string().nullable(),
    message: z.string().nullable(),
  })
  .partial();
const EventLog = z
  .object({
    id: z.number().int(),
    surveyId: z.number().int(),
    name: z.string().nullable(),
    entries: z.array(EventLogEntry).nullable(),
  })
  .partial();
const Port = z
  .object({
    id: z.number().int(),
    surveyId: z.number().int(),
    localPort: z.string().nullable(),
    localAddress: z.string().nullable(),
    foreignAddress: z.string().nullable(),
    foreignPort: z.string().nullable(),
    pid: z.number().int(),
    process: z.string().nullable(),
    protocol: z.string().nullable(),
    state: z.string().nullable(),
  })
  .partial();
const Survey = z
  .object({
    id: z.number().int(),
    machineId: z.string().uuid(),
    created: dateTime,
    uptime: TimeSpan,
    interfaces: z.array(Interface).nullable(),
    localUsers: z.array(LocalUser).nullable(),
    drives: z.array(DriveInfo).nullable(),
    processes: z.array(LocalProcess).nullable(),
    eventLogs: z.array(EventLog).nullable(),
    ports: z.array(Port).nullable(),
  })
  .partial();
const MachineTimeLine = z
  .object({
    id: z.number().int(),
    machineId: z.string().uuid(),
    timeLine: z.string().nullable(),
    createdUtc: dateTime,
  })
  .partial();
const WebhookMethod = z.enum(["GET", "POST"]);
const Webhook = z
  .object({
    id: z.string().uuid(),
    status: StatusType,
    description: z.string().nullable(),
    postbackUrl: z.string().nullable(),
    postbackMethod: WebhookMethod,
    postbackFormat: z.string().nullable(),
    createdUtc: dateTime,
    applicationUserId: z.string().uuid(),
  })
  .partial();

export const schemas = {
  GroupMachine,
  StatusType,
  HistoryType,
  MachineHistoryItem,
  HistoryHealth,
  HistoryTimeLine,
  HistoryTrackable,
  UpDownStatus,
  Machine,
  Group,
  UpdateType,
  MachineUpdate,
  TimeLineStatus,
  handlerType,
  TimeSpan,
  TimeLineEvent,
  TimeLineScheduleType,
  TimeLineHandler,
  TimeLine,
  MachineUpdateViewModel,
  NameProfile,
  AddressProfile,
  Preference,
  Unit,
  MilitaryUnit,
  MilitaryBranch,
  Rank,
  DegreeLevel,
  School,
  Degree,
  EducationProfile,
  EmploymentStatuses,
  EmploymentRecord,
  EmploymentProfile,
  BiologicalSex,
  Prescription,
  MedicalCondition,
  HealthProfile,
  RelationshipProfile,
  Person,
  FamilyProfile,
  CreditCard,
  FinancialProfile,
  MentalHealthProfile,
  Trip,
  ForeignTravelProfile,
  StrengthProfile,
  WeaknessProfile,
  CareerProfile,
  MachineProfile,
  RelatedEvent,
  AccessProfile,
  CriminalViolentOrAbusiveConductProfile,
  FinancialConsiderationsProfile,
  ForeignConsiderationsProfile,
  JudgementCharacterAndPsychologicalConditionsProfile,
  ProfessionalLifecycleAndPerformanceProfile,
  SecurityAndComplianceIncidentsProfile,
  SubstanceAbuseAndAddictiveBehaviorsProfile,
  TechnicalActivityProfile,
  InsiderThreatProfile,
  Account,
  MotivationalProfile,
  NpcProfile,
  NpcRecord,
  NpcNameId,
  IActionResult,
  TfVarsConfiguration,
  RankDistribution,
  PreferenceOption,
  NpcGenerationConfiguration,
  NpcConfiguration,
  TeamConfiguration,
  EnclaveConfiguration,
  InsiderThreatGenerationConfiguration,
  GenerationConfiguration,
  InterfaceBinding,
  Interface,
  LocalUser,
  DriveInfo,
  LocalProcess,
  EventLogEntry,
  EventLog,
  Port,
  Survey,
  MachineTimeLine,
  WebhookMethod,
  Webhook,
};

const endpoints = makeApi([
  {
    method: "get",
    path: "/animations/output",
    alias: "getAnimationsoutput",
    requestFormat: "json",
    parameters: [
      {
        name: "job",
        type: "Query",
        schema: z
          .enum([
            "SOCIALGRAPH",
            "SOCIALSHARING",
            "SOCIALBELIEF",
            "CHAT",
            "FULLAUTONOMY",
          ])
          .optional(),
      },
    ],
    response: z.void(),
  },
  {
    method: "get",
    path: "/animations/start",
    alias: "getAnimationsstart",
    requestFormat: "json",
    response: z.void(),
  },
  {
    method: "get",
    path: "/animations/status",
    alias: "getAnimationsstatus",
    requestFormat: "json",
    response: z.void(),
  },
  {
    method: "get",
    path: "/animations/stop",
    alias: "getAnimationsstop",
    requestFormat: "json",
    response: z.void(),
  },
  {
    method: "get",
    path: "/api/machinegroups",
    alias: "getApimachinegroups",
    requestFormat: "json",
    parameters: [
      {
        name: "q",
        type: "Query",
        schema: z.string().optional(),
      },
    ],
    response: z.array(Group),
  },
  {
    method: "post",
    path: "/api/machinegroups",
    alias: "postApimachinegroups",
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        description: "The new group to add",
        type: "Body",
        schema: Group,
      },
    ],
    response: Group,
  },
  {
    method: "get",
    path: "/api/machinegroups/:id",
    alias: "getApimachinegroupsId",
    requestFormat: "json",
    parameters: [
      {
        name: "id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: Group,
  },
  {
    method: "put",
    path: "/api/machinegroups/:id",
    alias: "putApimachinegroupsId",
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        description: "The group to update",
        type: "Body",
        schema: Group,
      },
      {
        name: "id",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: Group,
  },

  {
    method: "post",
    path: "/api/machinegroups/:id/:machine_id",
    alias: "machineGroupsAddMachine",
    requestFormat: "json",
    parameters: [
      {
        name: "id",
        description: "group id",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "machine_id",
        description: "machine id",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: Group,
  },
  {
    method: "delete",
    path: "/api/machinegroups/:id/:machine_id",
    alias: "machineGroupsRemoveMachine",
    requestFormat: "json",
    response: Group,
  },

  {
    method: "delete",
    path: "/api/machinegroups/:id",
    alias: "deleteApimachinegroupsId",
    requestFormat: "json",
    parameters: [
      {
        name: "id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: Group,
  },
  {
    method: "get",
    path: "/api/machinegroups/:id/activity",
    alias: "getApimachinegroupsIdactivity",
    requestFormat: "json",
    parameters: [
      {
        name: "id",
        type: "Path",
        schema: z.number().int(),
      },
      {
        name: "skip",
        type: "Query",
        schema: z.number().int().optional(),
      },
      {
        name: "take",
        type: "Query",
        schema: z.number().int().optional(),
      },
    ],
    response: z.array(MachineActivity),
  },
  {
    method: "get",
    path: "/api/machinegroups/:id/health",
    alias: "getApimachinegroupsIdhealth",
    requestFormat: "json",
    parameters: [
      {
        name: "id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: z.void(),
  },
  {
    method: "get",
    path: "/api/machines",
    alias: "getApimachines",
    requestFormat: "json",
    parameters: [
      {
        name: "q",
        type: "Query",
        schema: z.string().optional(),
      },
    ],
    response: z.array(Machine),
  },
  {
    method: "post",
    path: "/api/machines",
    alias: "postApimachines",
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        description: "The machine to create",
        type: "Body",
        schema: Machine,
      },
    ],
    response: Machine,
  },
  {
    method: "get",
    path: "/api/machines/:id",
    alias: "getApimachinesId",
    requestFormat: "json",
    parameters: [
      {
        name: "id",
        type: "Path",
        schema: z.string().uuid(),
      },
    ],
    response: Machine,
  },
  {
    method: "put",
    path: "/api/machines/:id",
    alias: "putApimachinesId",
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        description: "The machine record to update",
        type: "Body",
        schema: Machine,
      },
      {
        name: "id",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: Machine,
  },
  {
    method: "delete",
    path: "/api/machines/:id",
    alias: "deleteApimachinesId",
    requestFormat: "json",
    parameters: [
      {
        name: "id",
        type: "Path",
        schema: z.string().uuid(),
      },
    ],
    response: Machine,
  },
  {
    method: "get",
    path: "/api/machines/:id/activity",
    alias: "getApimachinesIdactivity",
    requestFormat: "json",
    parameters: [
      {
        name: "id",
        type: "Path",
        schema: z.string().uuid(),
      },
      {
        name: "skip",
        type: "Query",
        schema: z.number().int().optional(),
      },
      {
        name: "take",
        type: "Query",
        schema: z.number().int().optional(),
      },
    ],
    response: z.array(MachineActivity),
  },
  {
    method: "get",
    path: "/api/machines/:id/health",
    alias: "getApimachinesIdhealth",
    requestFormat: "json",
    parameters: [
      {
        name: "id",
        type: "Path",
        schema: z.string().uuid(),
      },
    ],
    response: z.void(),
  },
  {
    method: "get",
    path: "/api/machines/list",
    alias: "getApimachineslist",
    requestFormat: "json",
    response: z.void(),
  },
  {
    method: "post",
    path: "/api/machineupdates",
    alias: "postApimachineupdates",
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: MachineUpdate,
      },
    ],
    response: z.void(),
    errors: [
      {
        status: 401,
        description: "Unauthorized",
        schema: z.void(),
      },
      {
        status: 404,
        description: "Not Found",
        schema: z.void(),
      },
    ],
  },
  {
    method: "get",
    path: "/api/machineupdates/:updateId",
    alias: "getApimachineupdatesUpdateId",
    requestFormat: "json",
    parameters: [
      {
        name: "updateId",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: MachineUpdate,
  },
  {
    method: "post",
    path: "/api/machineupdates/group/:groupId",
    alias: "postApimachineupdatesgroupGroupId",
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        description: "The update to send",
        type: "Body",
        schema: MachineUpdateViewModel,
      },
      {
        name: "groupId",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: z.void(),
  },
  {
    method: "get",
    path: "/api/machineupdates/machine/:machineId",
    alias: "getApimachineupdatesmachineMachineId",
    requestFormat: "json",
    parameters: [
      {
        name: "machineId",
        type: "Path",
        schema: z.string().uuid(),
      },
    ],
    response: z.array(MachineUpdate),
  },
  {
    method: "get",
    path: "/api/machineupdates/status/:status",
    alias: "getApimachineupdatesstatusStatus",
    requestFormat: "json",
    parameters: [
      {
        name: "status",
        type: "Path",
        schema: z.enum(["Active", "Deleted"]),
      },
    ],
    response: z.array(MachineUpdate),
  },
  {
    method: "get",
    path: "/api/machineupdates/type/:type",
    alias: "getApimachineupdatestypeType",
    requestFormat: "json",
    parameters: [
      {
        name: "type",
        type: "Path",
        schema: z.enum([
          "TimeLine",
          "Health",
          "TimeLinePartial",
          "RequestForTimeLine",
        ]),
      },
    ],
    response: z.array(MachineUpdate),
  },
  {
    method: "get",
    path: "/api/npcs",
    alias: "getApinpcs",
    requestFormat: "json",
    response: z.array(NpcRecord),
  },
  {
    method: "post",
    path: "/api/npcs",
    alias: "postApinpcs",
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: NpcProfile,
      },
      {
        name: "generate",
        type: "Query",
        schema: z.boolean().optional(),
      },
    ],
    response: NpcRecord,
  },
  {
    method: "get",
    path: "/api/npcs/:campaign/:enclave",
    alias: "getApinpcsCampaignEnclave",
    requestFormat: "json",
    parameters: [
      {
        name: "campaign",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "enclave",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.array(NpcRecord),
  },
  {
    method: "delete",
    path: "/api/npcs/:campaign/:enclave",
    alias: "deleteApinpcsCampaignEnclave",
    requestFormat: "json",
    parameters: [
      {
        name: "campaign",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "enclave",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.void(),
  },
  {
    method: "get",
    path: "/api/npcs/:campaign/:enclave/:team",
    alias: "getApinpcsCampaignEnclaveTeam",
    requestFormat: "json",
    parameters: [
      {
        name: "campaign",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "enclave",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "team",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.array(NpcRecord),
  },
  {
    method: "delete",
    path: "/api/npcs/:campaign/:enclave/:team",
    alias: "deleteApinpcsCampaignEnclaveTeam",
    requestFormat: "json",
    parameters: [
      {
        name: "campaign",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "enclave",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "team",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.void(),
  },
  {
    method: "get",
    path: "/api/npcs/:campaign/:enclave/:team/csv",
    alias: "getApinpcsCampaignEnclaveTeamcsv",
    requestFormat: "json",
    parameters: [
      {
        name: "campaign",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "enclave",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "team",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.object({}).partial(),
  },
  {
    method: "get",
    path: "/api/npcs/:campaign/:enclave/csv",
    alias: "getApinpcsCampaignEnclavecsv",
    requestFormat: "json",
    parameters: [
      {
        name: "campaign",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "enclave",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.object({}).partial(),
  },
  {
    method: "post",
    path: "/api/npcs/:campaign/:enclave/custom",
    alias: "postApinpcsCampaignEnclavecustom",
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: z.array(z.string()),
      },
      {
        name: "campaign",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "enclave",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.void(),
  },
  {
    method: "get",
    path: "/api/npcs/:id",
    alias: "getApinpcsId",
    requestFormat: "json",
    parameters: [
      {
        name: "id",
        type: "Path",
        schema: z.string().uuid(),
      },
    ],
    response: NpcRecord,
  },
  {
    method: "delete",
    path: "/api/npcs/:id",
    alias: "deleteApinpcsId",
    requestFormat: "json",
    parameters: [
      {
        name: "id",
        type: "Path",
        schema: z.string().uuid(),
      },
    ],
    response: z.void(),
  },
  {
    method: "get",
    path: "/api/npcs/:id/photo",
    alias: "getApinpcsIdphoto",
    requestFormat: "json",
    parameters: [
      {
        name: "id",
        type: "Path",
        schema: z.string().uuid(),
      },
    ],
    response: z.object({}).partial(),
  },
  {
    method: "post",
    path: "/api/npcs/insiderthreat",
    alias: "postApinpcsinsiderthreat",
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: InsiderThreatGenerationConfiguration,
      },
    ],
    response: z.array(NpcRecord),
  },
  {
    method: "get",
    path: "/api/npcs/insiderthreat/csv",
    alias: "getApinpcsinsiderthreatcsv",
    requestFormat: "json",
    response: z.object({}).partial(),
  },
  {
    method: "get",
    path: "/api/npcs/list",
    alias: "getApinpcslist",
    requestFormat: "json",
    response: z.array(NpcNameId),
  },
  {
    method: "post",
    path: "/api/npcs/npc/:npcId",
    alias: "postApinpcsnpcNpcId",
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: z.array(z.string()),
      },
      {
        name: "npcId",
        type: "Path",
        schema: z.string().uuid(),
      },
    ],
    response: z.void(),
  },
  {
    method: "post",
    path: "/api/npcs/tfvars",
    alias: "postApinpcstfvars",
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: TfVarsConfiguration,
      },
    ],
    response: z.object({}).partial(),
  },
  {
    method: "get",
    path: "/api/npcsgenerate",
    alias: "getApinpcsgenerate",
    requestFormat: "json",
    parameters: [
      {
        name: "key",
        type: "Query",
        schema: z.string().optional(),
      },
    ],
    response: z.array(NpcProfile),
  },
  {
    method: "post",
    path: "/api/npcsgenerate",
    alias: "postApinpcsgenerate",
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: GenerationConfiguration,
      },
    ],
    response: z.array(NpcRecord),
  },
  {
    method: "post",
    path: "/api/npcsgenerate/one",
    alias: "postApinpcsgenerateone",
    requestFormat: "json",
    response: NpcRecord,
  },
  {
    method: "post",
    path: "/api/npcsgenerate/syncwithmachineusernames",
    alias: "postApinpcsgeneratesyncwithmachineusernames",
    requestFormat: "json",
    response: NpcProfile,
  },
  {
    method: "get",
    path: "/api/trackables",
    alias: "getApitrackables",
    requestFormat: "json",
    response: z.void(),
  },
  {
    method: "get",
    path: "/api/trackables/:id",
    alias: "getApitrackablesId",
    requestFormat: "json",
    parameters: [
      {
        name: "id",
        type: "Path",
        schema: z.string().uuid(),
      },
    ],
    response: z.void(),
  },
  {
    method: "get",
    path: "/api/webhooks",
    alias: "getApiwebhooks",
    requestFormat: "json",
    response: z.array(Webhook),
  },
  {
    method: "post",
    path: "/api/webhooks",
    alias: "postApiwebhooks",
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        description: "The webhook to create",
        type: "Body",
        schema: Webhook,
      },
    ],
    response: z.void(),
  },
  {
    method: "get",
    path: "/api/webhooks/:id",
    alias: "getApiwebhooksId",
    requestFormat: "json",
    parameters: [
      {
        name: "id",
        type: "Path",
        schema: z.string().uuid(),
      },
    ],
    response: z.void(),
  },
  {
    method: "put",
    path: "/api/webhooks/:id",
    alias: "putApiwebhooksId",
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        description: "The update to make",
        type: "Body",
        schema: Webhook,
      },
      {
        name: "id",
        type: "Path",
        schema: z.string().uuid(),
      },
    ],
    response: z.void(),
  },
  {
    method: "delete",
    path: "/api/webhooks/:id",
    alias: "deleteApiwebhooksId",
    requestFormat: "json",
    parameters: [
      {
        name: "id",
        type: "Path",
        schema: z.string().uuid(),
      },
    ],
    response: z.void(),
  },
  {
    method: "get",
    path: "/api/webhooks/:id/test",
    alias: "getApiwebhooksIdtest",
    requestFormat: "json",
    parameters: [
      {
        name: "id",
        type: "Path",
        schema: z.string().uuid(),
      },
    ],
    response: z.void(),
  },
  {
    method: "get",
    path: "/api/webhooks/:webhookid/test/:historytimeLineid",
    alias: "getApiwebhooksWebhookidtestHistorytimeLineid",
    requestFormat: "json",
    parameters: [
      {
        name: "webhookid",
        type: "Path",
        schema: z.string().uuid(),
      },
      {
        name: "historytimeLineid",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: z.void(),
  },
  {
    method: "get",
    path: "/install/client/linux",
    alias: "getInstallclientlinux",
    requestFormat: "json",
    response: z.void(),
  },
  {
    method: "get",
    path: "/install/client/windows",
    alias: "getInstallclientwindows",
    requestFormat: "json",
    response: z.void(),
  },
  {
    method: "get",
    path: "/install/client/windows/x32",
    alias: "getInstallclientwindowsx32",
    requestFormat: "json",
    response: z.void(),
  },
  {
    method: "get",
    path: "/install/client/windows/x64",
    alias: "getInstallclientwindowsx64",
    requestFormat: "json",
    response: z.void(),
  },
  {
    method: "get",
    path: "/surveys/:machineId",
    alias: "getSurveysMachineId",
    requestFormat: "json",
    parameters: [
      {
        name: "machineId",
        type: "Path",
        schema: z.string().uuid(),
      },
    ],
    response: Survey,
  },
  {
    method: "get",
    path: "/surveys/:machineId/all",
    alias: "getSurveysMachineIdall",
    requestFormat: "json",
    parameters: [
      {
        name: "machineId",
        type: "Path",
        schema: z.string().uuid(),
      },
    ],
    response: z.array(Survey),
  },
  {
    method: "get",
    path: "/test",
    alias: "getTest",
    requestFormat: "json",
    response: z.void(),
  },
  {
    method: "post",
    path: "/api/timelines",
    alias: "postTimeLines",
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        description: "The update to send",
        type: "Body",
        schema: MachineUpdateViewModel,
      },
    ],
    response: z.void(),
  },
  {
    method: "get",
    path: "/api/timelines/:machineId",
    alias: "getTimeLinesMachineId",
    requestFormat: "json",
    parameters: [
      {
        name: "machineId",
        type: "Path",
        schema: z.string().uuid(),
      },
    ],
    response: MachineTimeLine,
  },
  {
    method: "get",
    path: "/api/timelines/:machineId/:timeLineId",
    alias: "getTimeLinesMachineIdTimeLineId",
    requestFormat: "json",
    parameters: [
      {
        name: "machineId",
        type: "Path",
        schema: z.string().uuid(),
      },
      {
        name: "timeLineId",
        type: "Path",
        schema: z.string().uuid(),
      },
    ],
    response: MachineTimeLine,
  },
  {
    method: "post",
    path: "/api/timelines/:machineId/:timeLineId/stop",
    alias: "postTimeLinesMachineIdTimeLineIdstop",
    requestFormat: "json",
    parameters: [
      {
        name: "machineId",
        type: "Path",
        schema: z.string().uuid(),
      },
      {
        name: "timeLineId",
        type: "Path",
        schema: z.string().uuid(),
      },
    ],
    response: z.void(),
  },
  {
    method: "get",
    path: "/api/timelines/updates",
    alias: "getTimeLinesupdates",
    requestFormat: "json",
    parameters: [
      {
        name: "machineId",
        type: "Path",
        schema: z.string().uuid(),
      },
    ],
    response: MachineTimeLine,
  },
]);

export const CLIENT_GHOSTS_API_PATH = "/api";

export const GHOSTS_API_URL =
  process.env.GHOSTS_API_URL ?? "http://ghosts-api:5000";

/**
 * Request to app url /ghosts-api if on client. These will be rewritten in middleware to ghosts api.
 * If on server, request directly to ghosts api.
 */
export const api = new Zodios(
  typeof window !== "undefined" ? CLIENT_GHOSTS_API_PATH : GHOSTS_API_URL,
  endpoints
);

export function createApiClient(baseUrl: string, options?: ZodiosOptions) {
  return new Zodios(baseUrl, endpoints, options);
}
