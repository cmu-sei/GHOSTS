import random

from app_logging import setup_logger
from config.config import CSV_MODEL, OLLAMA_ENABLED
from faker import Faker
from fastapi import APIRouter, Response
from utils.helper import generate_random_name
from utils.ollama import generate_document_with_ollama

router = APIRouter()
fake = Faker()
logger = setup_logger(__name__)


@router.get("/csv", tags=["Data Structures"])
@router.post("/csv", tags=["Data Structures"])
@router.get("/csv/{path:path}", tags=["Data Structures"])
@router.post("/csv/{path:path}", tags=["Data Structures"])
def return_csv(path: str) -> Response:
    """Generate a CSV file with fake data for any request starting with /csv, using Ollama if enabled."""

    logger.info(f"Received CSV request for path: /csv/{path}")

    num_rows = random.randint(1, 100)
    logger.debug(f"Generating CSV with {num_rows} rows.")

    try:
        if OLLAMA_ENABLED:
            # Prepare the prompt for Ollama model to generate CSV data
            prompt = f"Generate a CSV document with {num_rows} rows of fake data. The columns should include Name, Address, and Password. The data should be realistic and varied."
            logger.info(f"Sending request to Ollama model with prompt: {prompt}")

            generated_content = generate_document_with_ollama(prompt, CSV_MODEL)

            if generated_content:
                # Create the response with the content generated by Ollama
                response = Response(
                    content=generated_content.encode("utf8"), media_type="text/csv"
                )

                # Set the filename to something meaningful
                response.headers["Content-Disposition"] = (
                    f'inline; filename="{path or "ollama_generated"}.csv"'
                )

                logger.info("CSV document generated successfully using Ollama.")
                return response
            else:
                logger.info("Ollama failed to generate data, falling back to Faker.")

        # Fallback to Faker for content generation
        logger.info("Generating CSV with Faker.")

        # Generate fake CSV data
        body = fake.csv(
            header=("Name", "Address", "Password"),
            data_columns=("{{name}}", "{{address}}", "{{password}}"),
            num_rows=num_rows,
            include_row_ids=True,
        )
        logger.info("CSV data generated successfully using Faker.")

    except Exception as e:
        logger.error(f"Error generating CSV data: {e}")
        return Response(content="Error generating CSV data.", status_code=500)

    # Create a more descriptive filename based on the path or generate a random name
    filename = f"{path.replace(' ', '_') if path else generate_random_name('csv')}"
    logger.debug(f"Generated filename for CSV: {filename}")

    # Create the response with the correct content type and disposition
    response = Response(content=body.encode("utf8"), media_type="text/csv")
    response.headers["Content-Disposition"] = f'inline; filename="{filename}.csv"'

    # Log response details
    logger.info(f"Returning CSV file: {filename}.csv with {num_rows} rows.")

    return response
