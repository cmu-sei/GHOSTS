// <auto-generated />
using System;
using Ghosts.Animator.Models;
using Ghosts.Api.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Ghosts.Api.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20251003125531_SplitNpcSocialGraphIntoTables")]
    partial class SplitNpcSocialGraphIntoTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Ghosts.Api.Infrastructure.Models.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("pk_groups");

                    b.HasIndex("Name")
                        .HasDatabaseName("ix_groups_name");

                    b.ToTable("groups");
                });

            modelBuilder.Entity("Ghosts.Api.Infrastructure.Models.GroupMachine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("GroupId")
                        .HasColumnType("integer")
                        .HasColumnName("groupid");

                    b.Property<Guid>("MachineId")
                        .HasColumnType("uuid")
                        .HasColumnName("machineid");

                    b.HasKey("Id")
                        .HasName("pk_group_machines");

                    b.HasIndex("GroupId")
                        .HasDatabaseName("ix_group_machines_groupid");

                    b.HasIndex("MachineId")
                        .HasDatabaseName("ix_group_machines_machineid");

                    b.ToTable("group_machines");
                });

            modelBuilder.Entity("Ghosts.Api.Infrastructure.Models.HistoryHealth", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdutc");

                    b.Property<string>("Errors")
                        .HasColumnType("text")
                        .HasColumnName("errors");

                    b.Property<long>("ExecutionTime")
                        .HasColumnType("bigint")
                        .HasColumnName("executiontime");

                    b.Property<bool?>("Internet")
                        .HasColumnType("boolean")
                        .HasColumnName("internet");

                    b.Property<string>("LoggedOnUsers")
                        .HasColumnType("text")
                        .HasColumnName("loggedonusers");

                    b.Property<Guid>("MachineId")
                        .HasColumnType("uuid")
                        .HasColumnName("machineid");

                    b.Property<bool?>("Permissions")
                        .HasColumnType("boolean")
                        .HasColumnName("permissions");

                    b.Property<string>("Stats")
                        .HasColumnType("text")
                        .HasColumnName("stats");

                    b.HasKey("Id")
                        .HasName("pk_history_health");

                    b.HasIndex("CreatedUtc")
                        .HasDatabaseName("ix_history_health_createdutc");

                    b.HasIndex("MachineId")
                        .HasDatabaseName("ix_history_health_machineid");

                    b.ToTable("history_health");
                });

            modelBuilder.Entity("Ghosts.Api.Infrastructure.Models.HistoryTimeline", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Command")
                        .HasColumnType("text")
                        .HasColumnName("command");

                    b.Property<string>("CommandArg")
                        .HasColumnType("text")
                        .HasColumnName("commandarg");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdutc");

                    b.Property<string>("Handler")
                        .HasColumnType("text")
                        .HasColumnName("handler");

                    b.Property<Guid>("MachineId")
                        .HasColumnType("uuid")
                        .HasColumnName("machineid");

                    b.Property<string>("Result")
                        .HasColumnType("text")
                        .HasColumnName("result");

                    b.Property<string>("Tags")
                        .HasColumnType("text")
                        .HasColumnName("tags");

                    b.HasKey("Id")
                        .HasName("pk_history_timeline");

                    b.HasIndex("CreatedUtc")
                        .HasDatabaseName("ix_history_timeline_createdutc");

                    b.HasIndex("MachineId")
                        .HasDatabaseName("ix_history_timeline_machineid");

                    b.HasIndex("Tags")
                        .HasDatabaseName("ix_history_timeline_tags");

                    b.ToTable("history_timeline");
                });

            modelBuilder.Entity("Ghosts.Api.Infrastructure.Models.HistoryTrackable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Command")
                        .HasColumnType("text")
                        .HasColumnName("command");

                    b.Property<string>("CommandArg")
                        .HasColumnType("text")
                        .HasColumnName("commandarg");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdutc");

                    b.Property<string>("Handler")
                        .HasColumnType("text")
                        .HasColumnName("handler");

                    b.Property<Guid>("MachineId")
                        .HasColumnType("uuid")
                        .HasColumnName("machineid");

                    b.Property<string>("Result")
                        .HasColumnType("text")
                        .HasColumnName("result");

                    b.Property<Guid>("TrackableId")
                        .HasColumnType("uuid")
                        .HasColumnName("trackableid");

                    b.HasKey("Id")
                        .HasName("pk_history_trackables");

                    b.HasIndex("MachineId")
                        .HasDatabaseName("ix_history_trackables_machineid");

                    b.ToTable("history_trackables");
                });

            modelBuilder.Entity("Ghosts.Api.Infrastructure.Models.Machine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ClientVersion")
                        .HasColumnType("text")
                        .HasColumnName("clientversion");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdutc");

                    b.Property<string>("CurrentUsername")
                        .HasColumnType("text")
                        .HasColumnName("currentusername");

                    b.Property<string>("Domain")
                        .HasColumnType("text")
                        .HasColumnName("domain");

                    b.Property<string>("FQDN")
                        .HasColumnType("text")
                        .HasColumnName("fqdn");

                    b.Property<string>("Host")
                        .HasColumnType("text")
                        .HasColumnName("host");

                    b.Property<string>("HostIp")
                        .HasColumnType("text")
                        .HasColumnName("hostip");

                    b.Property<string>("IPAddress")
                        .HasColumnType("text")
                        .HasColumnName("ipaddress");

                    b.Property<DateTime>("LastReportedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lastreportedutc");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("ResolvedHost")
                        .HasColumnType("text")
                        .HasColumnName("resolvedhost");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<int>("StatusUp")
                        .HasColumnType("integer")
                        .HasColumnName("statusup");

                    b.HasKey("Id")
                        .HasName("pk_machines");

                    b.HasIndex("CreatedUtc")
                        .HasDatabaseName("ix_machines_createdutc");

                    b.HasIndex("LastReportedUtc")
                        .HasDatabaseName("ix_machines_lastreportedutc");

                    b.HasIndex("Status")
                        .HasDatabaseName("ix_machines_status");

                    b.ToTable("machines");
                });

            modelBuilder.Entity("Ghosts.Api.Infrastructure.Models.Machine+MachineHistoryItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdutc");

                    b.Property<Guid>("MachineId")
                        .HasColumnType("uuid")
                        .HasColumnName("machineid");

                    b.Property<string>("Object")
                        .HasColumnType("text")
                        .HasColumnName("object");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_history_machine");

                    b.HasIndex("CreatedUtc")
                        .HasDatabaseName("ix_history_machine_createdutc");

                    b.HasIndex("MachineId")
                        .HasDatabaseName("ix_history_machine_machineid");

                    b.ToTable("history_machine");
                });

            modelBuilder.Entity("Ghosts.Api.Infrastructure.Models.MachineTimeline", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdutc");

                    b.Property<Guid>("MachineId")
                        .HasColumnType("uuid")
                        .HasColumnName("machineid");

                    b.Property<string>("Timeline")
                        .HasColumnType("jsonb")
                        .HasColumnName("timeline");

                    b.HasKey("Id")
                        .HasName("pk_machine_timelines");

                    b.ToTable("machine_timelines");
                });

            modelBuilder.Entity("Ghosts.Api.Infrastructure.Models.MachineUpdate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ActiveUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("activeutc");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdutc");

                    b.Property<Guid>("MachineId")
                        .HasColumnType("uuid")
                        .HasColumnName("machineid");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<string>("Update")
                        .HasColumnType("text")
                        .HasColumnName("update");

                    b.Property<string>("Username")
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("pk_machine_updates");

                    b.HasIndex("ActiveUtc")
                        .HasDatabaseName("ix_machine_updates_activeutc");

                    b.HasIndex("CreatedUtc")
                        .HasDatabaseName("ix_machine_updates_createdutc");

                    b.HasIndex("Status")
                        .HasDatabaseName("ix_machine_updates_status");

                    b.ToTable("machine_updates");
                });

            modelBuilder.Entity("Ghosts.Api.Infrastructure.Models.NpcActivity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ActivityType")
                        .HasColumnType("integer")
                        .HasColumnName("activitytype");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdutc");

                    b.Property<string>("Detail")
                        .HasColumnType("text")
                        .HasColumnName("detail");

                    b.Property<Guid>("NpcId")
                        .HasColumnType("uuid")
                        .HasColumnName("npcid");

                    b.HasKey("Id")
                        .HasName("pk_npc_activity");

                    b.ToTable("npc_activity");
                });

            modelBuilder.Entity("Ghosts.Api.Infrastructure.Models.NpcBelief", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("FromNpcId")
                        .HasColumnType("uuid")
                        .HasColumnName("fromnpcid");

                    b.Property<decimal>("Likelihood")
                        .HasColumnType("numeric")
                        .HasColumnName("likelihood");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<decimal>("Posterior")
                        .HasColumnType("numeric")
                        .HasColumnName("posterior");

                    b.Property<Guid>("SocialGraphId")
                        .HasColumnType("uuid")
                        .HasColumnName("socialgraphid");

                    b.Property<long>("Step")
                        .HasColumnType("bigint")
                        .HasColumnName("step");

                    b.Property<Guid>("ToNpcId")
                        .HasColumnType("uuid")
                        .HasColumnName("tonpcid");

                    b.HasKey("Id")
                        .HasName("pk_npcbeliefs");

                    b.HasIndex("Name")
                        .HasDatabaseName("ix_npcbeliefs_name");

                    b.HasIndex("SocialGraphId")
                        .HasDatabaseName("ix_npcbeliefs_socialgraphid");

                    b.HasIndex("Step")
                        .HasDatabaseName("ix_npcbeliefs_step");

                    b.HasIndex("ToNpcId", "FromNpcId")
                        .HasDatabaseName("ix_npcbeliefs_tonpcid_fromnpcid");

                    b.ToTable("npcbeliefs");
                });

            modelBuilder.Entity("Ghosts.Api.Infrastructure.Models.NpcInteraction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("SocialConnectionId")
                        .HasColumnType("integer")
                        .HasColumnName("socialconnectionid");

                    b.Property<long>("Step")
                        .HasColumnType("bigint")
                        .HasColumnName("step");

                    b.Property<int>("Value")
                        .HasColumnType("integer")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_npcinteractions");

                    b.HasIndex("SocialConnectionId")
                        .HasDatabaseName("ix_npcinteractions_socialconnectionid");

                    b.HasIndex("Step")
                        .HasDatabaseName("ix_npcinteractions_step");

                    b.ToTable("npcinteractions");
                });

            modelBuilder.Entity("Ghosts.Api.Infrastructure.Models.NpcIpAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedUTC")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdutc");

                    b.Property<string>("Enclave")
                        .HasColumnType("text")
                        .HasColumnName("enclave");

                    b.Property<string>("IpAddress")
                        .HasColumnType("text")
                        .HasColumnName("ipaddress");

                    b.Property<Guid>("NpcId")
                        .HasColumnType("uuid")
                        .HasColumnName("npcid");

                    b.HasKey("Id")
                        .HasName("pk_ips");

                    b.ToTable("ips");
                });

            modelBuilder.Entity("Ghosts.Api.Infrastructure.Models.NpcLearning", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("FromNpcId")
                        .HasColumnType("uuid")
                        .HasColumnName("fromnpcid");

                    b.Property<Guid>("SocialGraphId")
                        .HasColumnType("uuid")
                        .HasColumnName("socialgraphid");

                    b.Property<long>("Step")
                        .HasColumnType("bigint")
                        .HasColumnName("step");

                    b.Property<Guid>("ToNpcId")
                        .HasColumnType("uuid")
                        .HasColumnName("tonpcid");

                    b.Property<string>("Topic")
                        .HasColumnType("text")
                        .HasColumnName("topic");

                    b.Property<int>("Value")
                        .HasColumnType("integer")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_npclearnings");

                    b.HasIndex("SocialGraphId")
                        .HasDatabaseName("ix_npclearnings_socialgraphid");

                    b.HasIndex("Step")
                        .HasDatabaseName("ix_npclearnings_step");

                    b.HasIndex("Topic")
                        .HasDatabaseName("ix_npclearnings_topic");

                    b.HasIndex("ToNpcId", "FromNpcId")
                        .HasDatabaseName("ix_npclearnings_tonpcid_fromnpcid");

                    b.ToTable("npclearnings");
                });

            modelBuilder.Entity("Ghosts.Api.Infrastructure.Models.NpcRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Campaign")
                        .HasColumnType("text")
                        .HasColumnName("campaign");

                    b.Property<string>("Enclave")
                        .HasColumnType("text")
                        .HasColumnName("enclave");

                    b.Property<Guid?>("MachineId")
                        .HasColumnType("uuid")
                        .HasColumnName("machineid");

                    b.Property<NpcProfile>("NpcProfile")
                        .HasColumnType("jsonb")
                        .HasColumnName("npcprofile");

                    b.Property<Guid?>("NpcSocialGraphId")
                        .HasColumnType("uuid")
                        .HasColumnName("npcsocialgraphid");

                    b.Property<string>("Team")
                        .HasColumnType("text")
                        .HasColumnName("team");

                    b.HasKey("Id")
                        .HasName("pk_npcs");

                    b.HasIndex("NpcSocialGraphId")
                        .HasDatabaseName("ix_npcs_npcsocialgraphid");

                    b.ToTable("npcs");
                });

            modelBuilder.Entity("Ghosts.Api.Infrastructure.Models.NpcSocialConnection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ConnectedNpcId")
                        .HasColumnType("uuid")
                        .HasColumnName("connectednpcid");

                    b.Property<string>("Distance")
                        .HasColumnType("text")
                        .HasColumnName("distance");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("RelationshipStatus")
                        .HasColumnType("integer")
                        .HasColumnName("relationshipstatus");

                    b.Property<Guid>("SocialGraphId")
                        .HasColumnType("uuid")
                        .HasColumnName("socialgraphid");

                    b.HasKey("Id")
                        .HasName("pk_npcsocialconnections");

                    b.HasIndex("ConnectedNpcId")
                        .HasDatabaseName("ix_npcsocialconnections_connectednpcid");

                    b.HasIndex("SocialGraphId")
                        .HasDatabaseName("ix_npcsocialconnections_socialgraphid");

                    b.HasIndex("SocialGraphId", "ConnectedNpcId")
                        .HasDatabaseName("ix_npcsocialconnections_socialgraphid_connectednpcid");

                    b.ToTable("npcsocialconnections");
                });

            modelBuilder.Entity("Ghosts.Api.Infrastructure.Models.NpcSocialGraph", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<long>("CurrentStep")
                        .HasColumnType("bigint")
                        .HasColumnName("currentstep");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_npcsocialgraphs");

                    b.ToTable("npcsocialgraphs");
                });

            modelBuilder.Entity("Ghosts.Api.Infrastructure.Models.Trackable", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("MachineId")
                        .HasColumnType("uuid")
                        .HasColumnName("machineid");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_trackables");

                    b.ToTable("trackables");
                });

            modelBuilder.Entity("Ghosts.Api.Infrastructure.Models.Webhook", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("applicationuserid");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdutc");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("PostbackFormat")
                        .HasColumnType("text")
                        .HasColumnName("postbackformat");

                    b.Property<int>("PostbackMethod")
                        .HasColumnType("integer")
                        .HasColumnName("postbackmethod");

                    b.Property<string>("PostbackUrl")
                        .HasColumnType("text")
                        .HasColumnName("postbackurl");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("pk_webhooks");

                    b.HasIndex("CreatedUtc")
                        .HasDatabaseName("ix_webhooks_createdutc");

                    b.HasIndex("Status")
                        .HasDatabaseName("ix_webhooks_status");

                    b.ToTable("webhooks");
                });

            modelBuilder.Entity("Ghosts.Domain.Messages.MesssagesForServer.Survey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<Guid>("MachineId")
                        .HasColumnType("uuid")
                        .HasColumnName("machineid");

                    b.Property<TimeSpan>("Uptime")
                        .HasColumnType("interval")
                        .HasColumnName("uptime");

                    b.HasKey("Id")
                        .HasName("pk_surveys");

                    b.HasIndex("MachineId")
                        .HasDatabaseName("ix_surveys_machineid");

                    b.ToTable("surveys");
                });

            modelBuilder.Entity("Ghosts.Domain.Messages.MesssagesForServer.Survey+DriveInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<long>("AvailableFreeSpace")
                        .HasColumnType("bigint")
                        .HasColumnName("availablefreespace");

                    b.Property<string>("DriveFormat")
                        .HasColumnType("text")
                        .HasColumnName("driveformat");

                    b.Property<string>("DriveType")
                        .HasColumnType("text")
                        .HasColumnName("drivetype");

                    b.Property<bool>("IsReady")
                        .HasColumnType("boolean")
                        .HasColumnName("isready");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("RootDirectory")
                        .HasColumnType("text")
                        .HasColumnName("rootdirectory");

                    b.Property<int>("SurveyId")
                        .HasColumnType("integer")
                        .HasColumnName("surveyid");

                    b.Property<long>("TotalFreeSpace")
                        .HasColumnType("bigint")
                        .HasColumnName("totalfreespace");

                    b.Property<long>("TotalSize")
                        .HasColumnType("bigint")
                        .HasColumnName("totalsize");

                    b.Property<string>("VolumeLabel")
                        .HasColumnType("text")
                        .HasColumnName("volumelabel");

                    b.HasKey("Id")
                        .HasName("pk_survey_drives");

                    b.HasIndex("SurveyId")
                        .HasDatabaseName("ix_survey_drives_surveyid");

                    b.ToTable("survey_drives");
                });

            modelBuilder.Entity("Ghosts.Domain.Messages.MesssagesForServer.Survey+EventLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("SurveyId")
                        .HasColumnType("integer")
                        .HasColumnName("surveyid");

                    b.HasKey("Id")
                        .HasName("pk_survey_event_logs");

                    b.HasIndex("SurveyId")
                        .HasDatabaseName("ix_survey_event_logs_surveyid");

                    b.ToTable("survey_event_logs");
                });

            modelBuilder.Entity("Ghosts.Domain.Messages.MesssagesForServer.Survey+EventLog+EventLogEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("EntryType")
                        .HasColumnType("text")
                        .HasColumnName("entrytype");

                    b.Property<int>("EventLogId")
                        .HasColumnType("integer")
                        .HasColumnName("eventlogid");

                    b.Property<string>("Message")
                        .HasColumnType("text")
                        .HasColumnName("message");

                    b.Property<string>("Source")
                        .HasColumnType("text")
                        .HasColumnName("source");

                    b.HasKey("Id")
                        .HasName("pk_survey_event_log_entries");

                    b.HasIndex("EventLogId")
                        .HasDatabaseName("ix_survey_event_log_entries_eventlogid");

                    b.ToTable("survey_event_log_entries");
                });

            modelBuilder.Entity("Ghosts.Domain.Messages.MesssagesForServer.Survey+Interface", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("SurveyId")
                        .HasColumnType("integer")
                        .HasColumnName("surveyid");

                    b.HasKey("Id")
                        .HasName("pk_survey_interfaces");

                    b.HasIndex("SurveyId")
                        .HasDatabaseName("ix_survey_interfaces_surveyid");

                    b.ToTable("survey_interfaces");
                });

            modelBuilder.Entity("Ghosts.Domain.Messages.MesssagesForServer.Survey+Interface+InterfaceBinding", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("InterfaceId")
                        .HasColumnType("integer")
                        .HasColumnName("interfaceid");

                    b.Property<string>("InternetAddress")
                        .HasColumnType("text")
                        .HasColumnName("internetaddress");

                    b.Property<string>("PhysicalAddress")
                        .HasColumnType("text")
                        .HasColumnName("physicaladdress");

                    b.Property<string>("Type")
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_survey_interface_bindings");

                    b.HasIndex("InterfaceId")
                        .HasDatabaseName("ix_survey_interface_bindings_interfaceid");

                    b.ToTable("survey_interface_bindings");
                });

            modelBuilder.Entity("Ghosts.Domain.Messages.MesssagesForServer.Survey+LocalProcess", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("FileName")
                        .HasColumnType("text")
                        .HasColumnName("filename");

                    b.Property<string>("MainWindowTitle")
                        .HasColumnType("text")
                        .HasColumnName("mainwindowtitle");

                    b.Property<string>("Owner")
                        .HasColumnType("text")
                        .HasColumnName("owner");

                    b.Property<string>("OwnerDomain")
                        .HasColumnType("text")
                        .HasColumnName("ownerdomain");

                    b.Property<string>("OwnerSid")
                        .HasColumnType("text")
                        .HasColumnName("ownersid");

                    b.Property<long>("PrivateMemorySize64")
                        .HasColumnType("bigint")
                        .HasColumnName("privatememorysize64");

                    b.Property<string>("ProcessName")
                        .HasColumnType("text")
                        .HasColumnName("processname");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("starttime");

                    b.Property<int>("SurveyId")
                        .HasColumnType("integer")
                        .HasColumnName("surveyid");

                    b.HasKey("Id")
                        .HasName("pk_survey_local_processes");

                    b.HasIndex("SurveyId")
                        .HasDatabaseName("ix_survey_local_processes_surveyid");

                    b.ToTable("survey_local_processes");
                });

            modelBuilder.Entity("Ghosts.Domain.Messages.MesssagesForServer.Survey+LocalUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Domain")
                        .HasColumnType("text")
                        .HasColumnName("domain");

                    b.Property<int>("SurveyId")
                        .HasColumnType("integer")
                        .HasColumnName("surveyid");

                    b.Property<string>("Username")
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("pk_survey_users");

                    b.HasIndex("SurveyId")
                        .HasDatabaseName("ix_survey_users_surveyid");

                    b.ToTable("survey_users");
                });

            modelBuilder.Entity("Ghosts.Domain.Messages.MesssagesForServer.Survey+Port", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ForeignAddress")
                        .HasColumnType("text")
                        .HasColumnName("foreignaddress");

                    b.Property<string>("ForeignPort")
                        .HasColumnType("text")
                        .HasColumnName("foreignport");

                    b.Property<string>("LocalAddress")
                        .HasColumnType("text")
                        .HasColumnName("localaddress");

                    b.Property<string>("LocalPort")
                        .HasColumnType("text")
                        .HasColumnName("localport");

                    b.Property<int>("PID")
                        .HasColumnType("integer")
                        .HasColumnName("pid");

                    b.Property<string>("Process")
                        .HasColumnType("text")
                        .HasColumnName("process");

                    b.Property<string>("Protocol")
                        .HasColumnType("text")
                        .HasColumnName("protocol");

                    b.Property<string>("State")
                        .HasColumnType("text")
                        .HasColumnName("state");

                    b.Property<int>("SurveyId")
                        .HasColumnType("integer")
                        .HasColumnName("surveyid");

                    b.HasKey("Id")
                        .HasName("pk_survey_ports");

                    b.HasIndex("SurveyId")
                        .HasDatabaseName("ix_survey_ports_surveyid");

                    b.ToTable("survey_ports");
                });

            modelBuilder.Entity("Ghosts.Api.Infrastructure.Models.GroupMachine", b =>
                {
                    b.HasOne("Ghosts.Api.Infrastructure.Models.Group", null)
                        .WithMany("GroupMachines")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_group_machines_groups_groupid");
                });

            modelBuilder.Entity("Ghosts.Api.Infrastructure.Models.HistoryHealth", b =>
                {
                    b.HasOne("Ghosts.Api.Infrastructure.Models.Machine", null)
                        .WithMany("HistoryHealth")
                        .HasForeignKey("MachineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_history_health_machines_machineid");
                });

            modelBuilder.Entity("Ghosts.Api.Infrastructure.Models.HistoryTimeline", b =>
                {
                    b.HasOne("Ghosts.Api.Infrastructure.Models.Machine", null)
                        .WithMany("HistoryTimeline")
                        .HasForeignKey("MachineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_history_timeline_machines_machineid");
                });

            modelBuilder.Entity("Ghosts.Api.Infrastructure.Models.HistoryTrackable", b =>
                {
                    b.HasOne("Ghosts.Api.Infrastructure.Models.Machine", null)
                        .WithMany("HistoryTrackables")
                        .HasForeignKey("MachineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_history_trackables_machines_machineid");
                });

            modelBuilder.Entity("Ghosts.Api.Infrastructure.Models.Machine+MachineHistoryItem", b =>
                {
                    b.HasOne("Ghosts.Api.Infrastructure.Models.Machine", null)
                        .WithMany("History")
                        .HasForeignKey("MachineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_history_machine_machines_machineid");
                });

            modelBuilder.Entity("Ghosts.Api.Infrastructure.Models.NpcBelief", b =>
                {
                    b.HasOne("Ghosts.Api.Infrastructure.Models.NpcSocialGraph", "SocialGraph")
                        .WithMany("Beliefs")
                        .HasForeignKey("SocialGraphId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_npcbeliefs_npcsocialgraphs_socialgraphid");

                    b.Navigation("SocialGraph");
                });

            modelBuilder.Entity("Ghosts.Api.Infrastructure.Models.NpcInteraction", b =>
                {
                    b.HasOne("Ghosts.Api.Infrastructure.Models.NpcSocialConnection", "SocialConnection")
                        .WithMany("Interactions")
                        .HasForeignKey("SocialConnectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_npcinteractions_npcsocialconnections_socialconnectionid");

                    b.Navigation("SocialConnection");
                });

            modelBuilder.Entity("Ghosts.Api.Infrastructure.Models.NpcLearning", b =>
                {
                    b.HasOne("Ghosts.Api.Infrastructure.Models.NpcSocialGraph", "SocialGraph")
                        .WithMany("Knowledge")
                        .HasForeignKey("SocialGraphId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_npclearnings_npcsocialgraphs_socialgraphid");

                    b.Navigation("SocialGraph");
                });

            modelBuilder.Entity("Ghosts.Api.Infrastructure.Models.NpcRecord", b =>
                {
                    b.HasOne("Ghosts.Api.Infrastructure.Models.NpcSocialGraph", "NpcSocialGraph")
                        .WithMany()
                        .HasForeignKey("NpcSocialGraphId")
                        .HasConstraintName("fk_npcs_npcsocialgraphs_npcsocialgraphid");

                    b.Navigation("NpcSocialGraph");
                });

            modelBuilder.Entity("Ghosts.Api.Infrastructure.Models.NpcSocialConnection", b =>
                {
                    b.HasOne("Ghosts.Api.Infrastructure.Models.NpcSocialGraph", "SocialGraph")
                        .WithMany("Connections")
                        .HasForeignKey("SocialGraphId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_npcsocialconnections_npcsocialgraphs_socialgraphid");

                    b.Navigation("SocialGraph");
                });

            modelBuilder.Entity("Ghosts.Domain.Messages.MesssagesForServer.Survey+DriveInfo", b =>
                {
                    b.HasOne("Ghosts.Domain.Messages.MesssagesForServer.Survey", null)
                        .WithMany("Drives")
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_survey_drives_surveys_surveyid");
                });

            modelBuilder.Entity("Ghosts.Domain.Messages.MesssagesForServer.Survey+EventLog", b =>
                {
                    b.HasOne("Ghosts.Domain.Messages.MesssagesForServer.Survey", null)
                        .WithMany("EventLogs")
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_survey_event_logs_surveys_surveyid");
                });

            modelBuilder.Entity("Ghosts.Domain.Messages.MesssagesForServer.Survey+EventLog+EventLogEntry", b =>
                {
                    b.HasOne("Ghosts.Domain.Messages.MesssagesForServer.Survey+EventLog", null)
                        .WithMany("Entries")
                        .HasForeignKey("EventLogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_survey_event_log_entries_survey_event_logs_eventlogid");
                });

            modelBuilder.Entity("Ghosts.Domain.Messages.MesssagesForServer.Survey+Interface", b =>
                {
                    b.HasOne("Ghosts.Domain.Messages.MesssagesForServer.Survey", null)
                        .WithMany("Interfaces")
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_survey_interfaces_surveys_surveyid");
                });

            modelBuilder.Entity("Ghosts.Domain.Messages.MesssagesForServer.Survey+Interface+InterfaceBinding", b =>
                {
                    b.HasOne("Ghosts.Domain.Messages.MesssagesForServer.Survey+Interface", null)
                        .WithMany("Bindings")
                        .HasForeignKey("InterfaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_survey_interface_bindings_survey_interfaces_interfaceid");
                });

            modelBuilder.Entity("Ghosts.Domain.Messages.MesssagesForServer.Survey+LocalProcess", b =>
                {
                    b.HasOne("Ghosts.Domain.Messages.MesssagesForServer.Survey", null)
                        .WithMany("Processes")
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_survey_local_processes_surveys_surveyid");
                });

            modelBuilder.Entity("Ghosts.Domain.Messages.MesssagesForServer.Survey+LocalUser", b =>
                {
                    b.HasOne("Ghosts.Domain.Messages.MesssagesForServer.Survey", null)
                        .WithMany("LocalUsers")
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_survey_users_surveys_surveyid");
                });

            modelBuilder.Entity("Ghosts.Domain.Messages.MesssagesForServer.Survey+Port", b =>
                {
                    b.HasOne("Ghosts.Domain.Messages.MesssagesForServer.Survey", null)
                        .WithMany("Ports")
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_survey_ports_surveys_surveyid");
                });

            modelBuilder.Entity("Ghosts.Api.Infrastructure.Models.Group", b =>
                {
                    b.Navigation("GroupMachines");
                });

            modelBuilder.Entity("Ghosts.Api.Infrastructure.Models.Machine", b =>
                {
                    b.Navigation("History");

                    b.Navigation("HistoryHealth");

                    b.Navigation("HistoryTimeline");

                    b.Navigation("HistoryTrackables");
                });

            modelBuilder.Entity("Ghosts.Api.Infrastructure.Models.NpcSocialConnection", b =>
                {
                    b.Navigation("Interactions");
                });

            modelBuilder.Entity("Ghosts.Api.Infrastructure.Models.NpcSocialGraph", b =>
                {
                    b.Navigation("Beliefs");

                    b.Navigation("Connections");

                    b.Navigation("Knowledge");
                });

            modelBuilder.Entity("Ghosts.Domain.Messages.MesssagesForServer.Survey", b =>
                {
                    b.Navigation("Drives");

                    b.Navigation("EventLogs");

                    b.Navigation("Interfaces");

                    b.Navigation("LocalUsers");

                    b.Navigation("Ports");

                    b.Navigation("Processes");
                });

            modelBuilder.Entity("Ghosts.Domain.Messages.MesssagesForServer.Survey+EventLog", b =>
                {
                    b.Navigation("Entries");
                });

            modelBuilder.Entity("Ghosts.Domain.Messages.MesssagesForServer.Survey+Interface", b =>
                {
                    b.Navigation("Bindings");
                });
#pragma warning restore 612, 618
        }
    }
}
